/*
 * This file is generated by jOOQ.
 */
package my.starter.jooq.tables.records


import java.time.OffsetDateTime

import my.starter.jooq.enums.UserGender
import my.starter.jooq.tables.User

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersRecord private constructor() : UpdatableRecordImpl<UsersRecord>(User.USERS), Record6<Int?, String?, String?, Int?, UserGender?, OffsetDateTime?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var email: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var fullName: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var age: Int
        set(value): Unit = set(3, value)
        get(): Int = get(3) as Int

    open var gender: UserGender
        set(value): Unit = set(4, value)
        get(): UserGender = get(4) as UserGender

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(5, value)
        get(): OffsetDateTime? = get(5) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, String?, String?, Int?, UserGender?, OffsetDateTime?> = super.fieldsRow() as Row6<Int?, String?, String?, Int?, UserGender?, OffsetDateTime?>
    override fun valuesRow(): Row6<Int?, String?, String?, Int?, UserGender?, OffsetDateTime?> = super.valuesRow() as Row6<Int?, String?, String?, Int?, UserGender?, OffsetDateTime?>
    override fun field1(): Field<Int?> = User.USERS.ID
    override fun field2(): Field<String?> = User.USERS.EMAIL
    override fun field3(): Field<String?> = User.USERS.FULL_NAME
    override fun field4(): Field<Int?> = User.USERS.AGE
    override fun field5(): Field<UserGender?> = User.USERS.GENDER
    override fun field6(): Field<OffsetDateTime?> = User.USERS.CREATED_AT
    override fun component1(): Int? = id
    override fun component2(): String = email
    override fun component3(): String = fullName
    override fun component4(): Int = age
    override fun component5(): UserGender = gender
    override fun component6(): OffsetDateTime? = createdAt
    override fun value1(): Int? = id
    override fun value2(): String = email
    override fun value3(): String = fullName
    override fun value4(): Int = age
    override fun value5(): UserGender = gender
    override fun value6(): OffsetDateTime? = createdAt

    override fun value1(value: Int?): UsersRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): UsersRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): UsersRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): UsersRecord {
        set(3, value)
        return this
    }

    override fun value5(value: UserGender?): UsersRecord {
        set(4, value)
        return this
    }

    override fun value6(value: OffsetDateTime?): UsersRecord {
        set(5, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: Int?, value5: UserGender?, value6: OffsetDateTime?): UsersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(id: Int? = null, email: String, fullName: String, age: Int, gender: UserGender, createdAt: OffsetDateTime? = null): this() {
        this.id = id
        this.email = email
        this.fullName = fullName
        this.age = age
        this.gender = gender
        this.createdAt = createdAt
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(value: my.starter.jooq.tables.pojos.User?): this() {
        if (value != null) {
            this.id = value.id
            this.email = value.email
            this.fullName = value.fullName
            this.age = value.age
            this.gender = value.gender
            this.createdAt = value.createdAt
            resetChangedOnNotNull()
        }
    }
}
