/*
 * This file is generated by jOOQ.
 */
package my.starter.jooq.tables


import java.time.OffsetDateTime
import java.util.function.Function

import kotlin.collections.List

import my.starter.jooq.DefaultSchema
import my.starter.jooq.enums.UserGender
import my.starter.jooq.keys.UNIQUE_EMAIL
import my.starter.jooq.keys.USERS_PKEY
import my.starter.jooq.tables.records.UsersRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class User(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersRecord>?,
    aliased: Table<UsersRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>users</code>
         */
        val USERS: User = User()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersRecord> = UsersRecord::class.java

    /**
     * The column <code>users.id</code>.
     */
    val ID: TableField<UsersRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>users.email</code>.
     */
    val EMAIL: TableField<UsersRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>users.full_name</code>.
     */
    val FULL_NAME: TableField<UsersRecord, String?> = createField(DSL.name("full_name"), SQLDataType.VARCHAR(256).nullable(false), this, "")

    /**
     * The column <code>users.age</code>.
     */
    val AGE: TableField<UsersRecord, Int?> = createField(DSL.name("age"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>users.gender</code>.
     */
    val GENDER: TableField<UsersRecord, UserGender?> = createField(DSL.name("gender"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(my.starter.jooq.enums.UserGender::class.java), this, "")

    /**
     * The column <code>users.created_at</code>.
     */
    val CREATED_AT: TableField<UsersRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<UsersRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>users</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>users</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>users</code> table reference
     */
    constructor(): this(DSL.name("users"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UsersRecord>): this(Internal.createPathAlias(child, key), child, key, USERS, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<UsersRecord, Int?> = super.getIdentity() as Identity<UsersRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UsersRecord> = USERS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<UsersRecord>> = listOf(UNIQUE_EMAIL)
    override fun `as`(alias: String): User = User(DSL.name(alias), this)
    override fun `as`(alias: Name): User = User(alias, this)
    override fun `as`(alias: Table<*>): User = User(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): User = User(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): User = User(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): User = User(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Int?, String?, String?, Int?, UserGender?, OffsetDateTime?> = super.fieldsRow() as Row6<Int?, String?, String?, Int?, UserGender?, OffsetDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?, String?, Int?, UserGender?, OffsetDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?, String?, Int?, UserGender?, OffsetDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
